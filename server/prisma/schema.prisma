// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]

  @@map("roles")
}

model User {
  id                  Int          @id @default(autoincrement())
  nickname            String       @unique
  login               String       @unique
  password            String
  avatar              String?
  role_id             Int
  role                Role         @relation(fields: [role_id], references: [id])
  inviterFriendships  Friendship[] @relation("InviterFriendships")
  accepterFriendships Friendship[] @relation("AccepterFriendships")

  sendedMessages    Message[] @relation("SenderMessages")
  recipientMessages Message[] @relation("RecipientMessages")

  @@map("users")
}

model Friendship {
  inviter_id  Int
  accepter_id Int

  inviter  User               @relation("InviterFriendships", fields: [inviter_id], references: [id])
  accepter User               @relation("AccepterFriendships", fields: [accepter_id], references: [id])
  status   FriendshipStatuses @default(REQUEST_SENT)

  @@id([inviter_id, accepter_id])
  @@unique([inviter_id, accepter_id])
  @@map("friendships")
}

enum FriendshipStatuses {
  REQUEST_SENT
  REQUEST_ACCEPTED
}

model Chat {
  id     Int     @id @default(autoincrement())
  name   String?
  avatar String?

  @@map("chats")
}

model ChatParticipants {
  chat_id Int
  user_id Int
  @@id([chat_id, user_id])
}

model Message {
  id           Int     @id @default(autoincrement())
  sender_id    Int
  recipient_id Int
  text         String?
  isRead       Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  sender      User          @relation("SenderMessages", fields: [sender_id], references: [id])
  recipient   User          @relation("RecipientMessages", fields: [recipient_id], references: [id])
  MessageFile MessageFile[]

  @@map("messages")
}

model MessageFile {
  id         Int    @id @default(autoincrement())
  name       String
  message_id Int

  message Message @relation(fields: [message_id], references: [id])

  @@map("message_files")
}
