// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  nickname String  @unique
  login    String  @unique
  password String
  avatar   String?

  inviterFriendships  Friendship[]      @relation("InviterFriendships")
  accepterFriendships Friendship[]      @relation("AccepterFriendships")
  ChatParticipant     ChatParticipant[]
  Message             Message[]

  @@map("users")
}

model Friendship {
  inviter_id  Int
  accepter_id Int

  inviter  User               @relation("InviterFriendships", fields: [inviter_id], references: [id])
  accepter User               @relation("AccepterFriendships", fields: [accepter_id], references: [id])
  status   FriendshipStatuses @default(REQUEST_SENT)

  @@id([inviter_id, accepter_id])
  @@unique([inviter_id, accepter_id])
  @@map("friendships")
}

enum FriendshipStatuses {
  REQUEST_SENT
  REQUEST_ACCEPTED
}

model Chat {
  id              Int               @id @default(autoincrement())
  name            String?
  avatar          String?
  ChatParticipant ChatParticipant[]
  Message         Message[]

  @@map("chats")
}

model ChatParticipant {
  chat_id Int
  user_id Int

  chat Chat @relation(fields: [chat_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@id([chat_id, user_id])
  @@map("chat_participants")
}

model Message {
  id      Int     @id @default(autoincrement())
  text    String?
  is_read Boolean @default(false)

  sender_id Int
  sender    User @relation(fields: [sender_id], references: [id])

  chat_id Int
  chat    Chat @relation(fields: [chat_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  MessageFile MessageFile[]

  @@map("messages")
}

model MessageFile {
  id         Int    @id @default(autoincrement())
  name       String
  message_id Int

  message Message @relation(fields: [message_id], references: [id])

  @@map("message_files")
}
